pragma solidity ^0.4.14;
contract Pallroll {

    uint salary = 1 ether;
    address public owner = msg.sender;
    address employee = 0xca35b7d915458ef540ade6068dfe2f44e8fa733c;
    uint payDuration = 10 seconds;
    uint lastPayday = now;
    
    // 定义了一个函数修改器，可被继承
    // 限制只有创建者才能访问
    // 修饰时，函数体被插入到 “_;” 处
    modifier onlyOwner {
        if(msg.sender != owner){
            revert();
        }
        _;
    }
     
    function changeSalary(uint _salary) public onlyOwner {
        salary = _salary;
    }
    
     function changeEmployee(address _employee) public onlyOwner {
        employee = _employee;
    }
    
    function addFund() payable returns (uint) {
       return this.balance; 
    }
    
    function calculateRunway() returns (uint) {
        return this.balance / salary;
    }
    
    function hasEnoughFund() returns(bool) {
        return calculateRunway() > 0;
    }
    
    function getPaid() {
        if(msg.sender != employee){
            revert();
        }
        
        uint nextPayday = lastPayday + payDuration;
        if (nextPayday > now) {
            revert();
        }
        
        lastPayday = nextPayday;
        employee.transfer(salary);
    }
    
}
